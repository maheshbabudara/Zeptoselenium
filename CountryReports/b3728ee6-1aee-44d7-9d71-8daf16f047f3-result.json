{"name": "test_country_web", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nStacktrace:\n\tGetHandleVerifier [0x00007FF6C8BCDC65+12853]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8E783B4+2250276]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8DB7696+1460486]\n\t(No symbol) [0x00007FF6C89EF27C]\n\t(No symbol) [0x00007FF6C89EE4F0]\n\t(No symbol) [0x00007FF6C89EFFF4]\n\t(No symbol) [0x00007FF6C89E8163]\n\t(No symbol) [0x00007FF6C89BFB54]\n\t(No symbol) [0x00007FF6C89BF000]\n\t(No symbol) [0x00007FF6C89BF741]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8D4CDA4+1024020]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6C8AE9A04+57108]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8D4BDA3+1019923]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8D4BA09+1019001]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6C8B6E021+394913]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6C8B6A944+380868]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6C8B6AA89+381193]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6C8B62286+346374]\n\tBaseThreadInitThunk [0x00007FFDD249257D+29]\n\tRtlUserThreadStart [0x00007FFDD3A0AF08+40]", "trace": "request = <SubRequest 'country' for <Function test_country_web>>\n\n    @pytest.fixture()\n    def country(request):\n        # Determine browser from environment variable or default to Chrome\n        browser_name = os.getenv('BROWSER', 'chrome')\n        # Browser options setup\n        options = Options()\n        options.add_argument('--disable-notifications')\n        options.add_argument('--headless')  # Run browser in headless mode\n        options.add_argument('--disable-gpu')\n        options.add_experimental_option('detach', True)\n    \n        # Download directory preferences, replace with actual location\n        location = '/path/to/downloads'  # Make sure this is a valid path\n        preferences = {\n            'download.default_directory': location,\n            'plugins.always_open_pdf_externally': True\n        }\n        options.add_experimental_option('prefs', preferences)\n    \n        # Initialize WebDriver based on selected browser\n        if browser_name == 'chrome':\n            driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()), options=options)\n        elif browser_name == 'edge':\n>           driver = webdriver.Edge(service=EdgeService(EdgeChromiumDriverManager().install()), options=options)\n\nTests\\conftest.py:163: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001DCF05F01D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: No matching capabili...B62286+346374]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDD249257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFDD3A0AF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: No matching capabilities found\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6C8BCDC65+12853]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8E783B4+2250276]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8DB7696+1460486]\nE       \t(No symbol) [0x00007FF6C89EF27C]\nE       \t(No symbol) [0x00007FF6C89EE4F0]\nE       \t(No symbol) [0x00007FF6C89EFFF4]\nE       \t(No symbol) [0x00007FF6C89E8163]\nE       \t(No symbol) [0x00007FF6C89BFB54]\nE       \t(No symbol) [0x00007FF6C89BF000]\nE       \t(No symbol) [0x00007FF6C89BF741]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8D4CDA4+1024020]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6C8AE9A04+57108]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8D4BDA3+1019923]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF6C8D4BA09+1019001]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6C8B6E021+394913]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6C8B6A944+380868]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6C8B6AA89+381193]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6C8B62286+346374]\nE       \tBaseThreadInitThunk [0x00007FFDD249257D+29]\nE       \tRtlUserThreadStart [0x00007FFDD3A0AF08+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1730824594465, "stop": 1730824594465, "uuid": "f97362ef-405f-4efb-a8bc-19d47bb15299", "historyId": "71dc5e6863992782057251d66b75e627", "testCaseId": "71dc5e6863992782057251d66b75e627", "fullName": "Tests.Countrie_web#test_country_web", "labels": [{"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "Countrie_web"}, {"name": "host", "value": "DESKTOP-9F3SG6R"}, {"name": "thread", "value": "16040-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.Countrie_web"}]}