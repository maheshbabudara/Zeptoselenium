{"name": "test_country_web", "status": "broken", "statusDetails": {"message": "Lib.library.Base.webtables.<locals>.mahe", "trace": "self = <urllib3.connection.HTTPConnection object at 0x000001A505F75E80>\n\n    def getresponse(self):\n        \"\"\"Get the response from the server.\n    \n        If the HTTPConnection is in the correct state, returns an\n        instance of HTTPResponse or of whatever object is returned by\n        the response_class variable.\n    \n        If a request has not been sent or if a previous response has\n        not be handled, ResponseNotReady is raised.  If the HTTP\n        response indicates that the connection should be closed, then\n        it will be closed before the response is returned.  When the\n        connection is closed, the underlying socket is closed.\n        \"\"\"\n    \n        # if a prior response has been completed, then forget about it.\n        if self.__response and self.__response.isclosed():\n            self.__response = None\n    \n        # if a prior response exists, then it must be completed (otherwise, we\n        # cannot read this response's header to determine the connection-close\n        # behavior)\n        #\n        # note: if a prior response existed, but was connection-close, then the\n        # socket and response were made independent of this HTTPConnection\n        # object since a new request requires that we open a whole new\n        # connection\n        #\n        # this means the prior response had one of two states:\n        #   1) will_close: this connection was reset and the prior socket and\n        #                  response operate independently\n        #   2) persistent: the response was retained and we await its\n        #                  isclosed() status to become true.\n        #\n        if self.__state != _CS_REQ_SENT or self.__response:\n            raise ResponseNotReady(self.__state)\n    \n        if self.debuglevel > 0:\n            response = self.response_class(self.sock, self.debuglevel,\n                                           method=self._method)\n        else:\n            response = self.response_class(self.sock, method=self._method)\n    \n        try:\n            try:\n>               response.begin()\n\nC:\\Users\\MAHESH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\http\\client.py:1428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\MAHESH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\http\\client.py:331: in begin\n    version, status, reason = self._read_status()\nC:\\Users\\MAHESH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\http\\client.py:292: in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <socket.SocketIO object at 0x000001A50355A7D0>, b = <memory at 0x000001A505F9C880>\n\n    def readinto(self, b):\n        \"\"\"Read up to len(b) bytes into the writable buffer *b* and return\n        the number of bytes read.  If the socket is non-blocking and no bytes\n        are available, None is returned.\n    \n        If *b* is non-empty, a 0 return value indicates that the connection\n        was shutdown at the other end.\n        \"\"\"\n        self._checkClosed()\n        self._checkReadable()\n        if self._timeout_occurred:\n            raise OSError(\"cannot read from timed out object\")\n        while True:\n            try:\n>               return self._sock.recv_into(b)\nE               ConnectionResetError: [WinError 10054] An existing connection was forcibly closed by the remote host\n\nC:\\Users\\MAHESH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\socket.py:720: ConnectionResetError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <POM.practisefile.practise object at 0x000001A505F23560>, row = ('xpath', '//table[@id=\"countries\"]/tbody/tr')\ncol = ('xpath', '//table[@id=\"countries\"]/tbody/tr[1]/td/h3/strong')\n\n    def webtables(self, row, col):\n        rows = self.search_elements(row)\n        cols = self.search_elements(col)\n        count=0\n        class mahe(Exception):\n            ...\n        try:\n            for r in range(2, len(rows) + 1):\n                for c in range(1, len(cols) + 1):\n                    if r == 140:\n                        dat=self.driver.find_element('xpath',f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[{c}]').text\n                        print(dat)\n                    else:\n                        country = self.driver.find_element('xpath',\n>                                                          f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[2]/strong').text\n\nLib\\library.py:117: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:378: in execute\n    response = self.command_executor.execute(driver_command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:391: in execute\n    return self._request(command_info[0], url, body=data)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\remote_connection.py:415: in _request\n    response = self._conn.request(method, url, body=body, headers=headers, timeout=self._client_config.timeout)\n.venv\\Lib\\site-packages\\urllib3\\_request_methods.py:135: in request\n    return self.request_encode_url(\n.venv\\Lib\\site-packages\\urllib3\\_request_methods.py:182: in request_encode_url\n    return self.urlopen(method, url, **extra_kw)\n.venv\\Lib\\site-packages\\urllib3\\poolmanager.py:443: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:789: in urlopen\n    response = self._make_request(\n.venv\\Lib\\site-packages\\urllib3\\connectionpool.py:536: in _make_request\n    response = conn.getresponse()\n.venv\\Lib\\site-packages\\urllib3\\connection.py:507: in getresponse\n    httplib_response = super().getresponse()\nC:\\Users\\MAHESH\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\http\\client.py:1430: in getresponse\n    self.close()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <urllib3.connection.HTTPConnection object at 0x000001A505F75E80>\n\n>   def close(self) -> None:\nE   KeyboardInterrupt\n\n.venv\\Lib\\site-packages\\urllib3\\connection.py:316: KeyboardInterrupt\n\nDuring handling of the above exception, another exception occurred:\n\ncountry = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"954a8b87daa448f221480e02fd2cd5e4\")>\n\n    def test_country_web(country):\n        c=practise(country)\n>       c.prac()\n\nTests\\Countrie_web.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPOM\\practisefile.py:7: in prac\n    self.webtables(country_locator.row_locator,country_locator.col_locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <POM.practisefile.practise object at 0x000001A505F23560>, row = ('xpath', '//table[@id=\"countries\"]/tbody/tr')\ncol = ('xpath', '//table[@id=\"countries\"]/tbody/tr[1]/td/h3/strong')\n\n    def webtables(self, row, col):\n        rows = self.search_elements(row)\n        cols = self.search_elements(col)\n        count=0\n        class mahe(Exception):\n            ...\n        try:\n            for r in range(2, len(rows) + 1):\n                for c in range(1, len(cols) + 1):\n                    if r == 140:\n                        dat=self.driver.find_element('xpath',f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[{c}]').text\n                        print(dat)\n                    else:\n                        country = self.driver.find_element('xpath',\n                                                           f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[2]/strong').text\n                        data = self.driver.find_element('xpath',\n                                                        f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[2]/strong/../../td[{c}]').text\n                        print(\"Country-->\", country, \"#-->\", data)\n                print()\n        except:\n>           raise mahe\nE           Lib.library.Base.webtables.<locals>.mahe\n\nLib\\library.py:123: mahe"}, "start": 1730825538056, "stop": 1730825556977, "uuid": "d0358406-3455-4c45-a403-58287335d44f", "historyId": "71dc5e6863992782057251d66b75e627", "testCaseId": "71dc5e6863992782057251d66b75e627", "fullName": "Tests.Countrie_web#test_country_web", "labels": [{"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "Countrie_web"}, {"name": "host", "value": "DESKTOP-9F3SG6R"}, {"name": "thread", "value": "9324-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.Countrie_web"}]}