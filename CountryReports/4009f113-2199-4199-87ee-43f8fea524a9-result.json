{"name": "test_country_web", "status": "broken", "statusDetails": {"message": "Lib.library.Base.webtables.<locals>.mahe", "trace": "self = <POM.practisefile.practise object at 0x000001AE182DAC30>, row = ('xpath', '//table[@id=\"countries\"]/tbody/tr')\ncol = ('xpath', '//table[@id=\"countries\"]/tbody/tr[1]/td/h3/strong')\n\n    def webtables(self, row, col):\n        rows = self.search_elements(row)\n        cols = self.search_elements(col)\n        count=0\n        class mahe(Exception):\n            ...\n        try:\n            for r in range(2, len(rows) + 1):\n                for c in range(1, len(cols) + 1):\n                    if r == 140:\n>                       dat=self.driver.find_element('xpath',f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[{c}').text\n\nLib\\library.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001AE15E6FB60>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector\\\\nfrom javascript error: {\\...07FF7D11DEBB9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFDD249257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFDD3A0AF08+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector\nE       from javascript error: {\"status\":32,\"value\":\"Unable to locate an element with the xpath expression //table[@id=\\\"countries\\\"]/tbody/tr[140]/td[1 because of the following error:\\nSyntaxError: Failed to execute 'evaluate' on 'Document': The string '//table[@id=\\\"countries\\\"]/tbody/tr[140]/td[1' is not a valid XPath expression.\"}\nE         (Session info: chrome=130.0.6723.92); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalid-selector-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7D1283AF5+28005]\nE       \t(No symbol) [0x00007FF7D11E83F0]\nE       \t(No symbol) [0x00007FF7D108580A]\nE       \t(No symbol) [0x00007FF7D108C2CC]\nE       \t(No symbol) [0x00007FF7D108E5E7]\nE       \t(No symbol) [0x00007FF7D108E6A0]\nE       \t(No symbol) [0x00007FF7D10D54EA]\nE       \t(No symbol) [0x00007FF7D10D5D2C]\nE       \t(No symbol) [0x00007FF7D111EA97]\nE       \t(No symbol) [0x00007FF7D10FBA7F]\nE       \t(No symbol) [0x00007FF7D111B8B3]\nE       \t(No symbol) [0x00007FF7D10FB7E3]\nE       \t(No symbol) [0x00007FF7D10C75C8]\nE       \t(No symbol) [0x00007FF7D10C8731]\nE       \tGetHandleVerifier [0x00007FF7D157646D+3118813]\nE       \tGetHandleVerifier [0x00007FF7D15C6CC0+3448624]\nE       \tGetHandleVerifier [0x00007FF7D15BCF3D+3408301]\nE       \tGetHandleVerifier [0x00007FF7D134A44B+841403]\nE       \t(No symbol) [0x00007FF7D11F344F]\nE       \t(No symbol) [0x00007FF7D11EF4C4]\nE       \t(No symbol) [0x00007FF7D11EF65D]\nE       \t(No symbol) [0x00007FF7D11DEBB9]\nE       \tBaseThreadInitThunk [0x00007FFDD249257D+29]\nE       \tRtlUserThreadStart [0x00007FFDD3A0AF08+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\ncountry = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"530ce7cef654d62b183c0a6a7a78f11a\")>\n\n    def test_country_web(country):\n        c=practise(country)\n>       c.prac()\n\nTests\\Countrie_web.py:9: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPOM\\practisefile.py:7: in prac\n    self.webtables(country_locator.row_locator,country_locator.col_locator)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <POM.practisefile.practise object at 0x000001AE182DAC30>, row = ('xpath', '//table[@id=\"countries\"]/tbody/tr')\ncol = ('xpath', '//table[@id=\"countries\"]/tbody/tr[1]/td/h3/strong')\n\n    def webtables(self, row, col):\n        rows = self.search_elements(row)\n        cols = self.search_elements(col)\n        count=0\n        class mahe(Exception):\n            ...\n        try:\n            for r in range(2, len(rows) + 1):\n                for c in range(1, len(cols) + 1):\n                    if r == 140:\n                        dat=self.driver.find_element('xpath',f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[{c}').text\n                        print(dat)\n                    else:\n                        country = self.driver.find_element('xpath',\n                                                           f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[2]/strong').text\n                        data = self.driver.find_element('xpath',\n                                                        f'//table[@id=\"countries\"]/tbody/tr[{r}]/td[2]/strong/../../td[{c}]').text\n                        print(\"Country-->\", country, \"#-->\", data)\n                print()\n        except:\n>           raise mahe\nE           Lib.library.Base.webtables.<locals>.mahe\n\nLib\\library.py:123: mahe"}, "attachments": [{"name": "stdout", "source": "6d52ed49-97ea-487f-b50a-bf5e3f23e8ab-attachment.txt", "type": "text/plain"}], "start": 1730822317958, "stop": 1730822357768, "uuid": "6ba78ba9-1216-4390-8841-d9c5fdeec8a1", "historyId": "71dc5e6863992782057251d66b75e627", "testCaseId": "71dc5e6863992782057251d66b75e627", "fullName": "Tests.Countrie_web#test_country_web", "labels": [{"name": "parentSuite", "value": "Tests"}, {"name": "suite", "value": "Countrie_web"}, {"name": "host", "value": "DESKTOP-9F3SG6R"}, {"name": "thread", "value": "21480-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.Countrie_web"}]}